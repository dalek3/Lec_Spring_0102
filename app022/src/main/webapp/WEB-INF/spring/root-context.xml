<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<!-- ...86, 139, 160, 326p.log4jdbc 설정후 -->	
		<property name="driverClassName" 
				  value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"></property>
		<property name="url" 
				  value="jdbc:log4jdbc:mysql://127.0.0.1:3306/zbook_ex?useSSL=false&amp;serverTimezone=Asia/Seoul"></property>
		<property name="username" value="joywins2"></property>
		<property name="password" value="tiger"></property>
	</bean>	
		 		
	<!--
		...90p.	DataSource 설정으로 JDBC 연결후, MyBatis와 MySql을 연동시킴. 
		   SqlSessionFactory : myBatis와 스프링의 Connection 생성.
	 -->		 		
	<bean id="sqlSessionFactory" 
	      class="org.mybatis.spring.SqlSessionFactoryBean">	   
	    <!--
	    	...90p.	JDBC커넥션을 처리하는 DataSource와 mybatis를 연결. 
	    -->
	 	<property name="dataSource" ref="dataSource" />	
	 	
	 	<!-- 
	 		...92p.mybatis 전용 설정파일을 스프링과 함께 작동하도록 연결함.
	 		/src/main/resources/mybatis-config.xml
	 	 -->
	 	<property name="configLocation" 
				value="classpath:/mybatis-config.xml"></property>
				
	 	<!-- 
	 		...132p.MyBatis가 동작하면 XML Mapper를 인식하도록 함.
	 		/src/main/resources/mappers/memberMapper.xml
	 		mapperLocations라는 속성을 추가하고, 작성된 mappers 폴더내의 어떤 폴더에서건
	 		Mapper.xml로 끝나면 자동으로 인식하도록 함.
	 	 -->				
		<property name="mapperLocations" 
		      value="classpath:mappers/**/*Mapper.xml"></property>
	</bean>	 
	
	<!-- 
		...133, 176p.MyBatis에서 DAO를 이용하는 경우, SqlSessionTemplate라는 것을 이용해서 DAO를 구현함.
		mybatis-spring에서 제공하는 SqlSessionTempalte객체는 기본적인 트랜잭션 관리나 쓰레드 처리의
		안정성등을 보장해주고, 개발자들이 직접 DB 연결, 종료작업하는 것을 줄여줌.
		SqlSessionFactory를 생성자로 주입함.
	 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" 
	 	  destroy-method="clearCache">
	  <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
	</bean>
		
	<!-- 
		...136, 176, 186p. 스프링이 MemberDAOImpl가 있는 패키지를 스캔해야만 @Repository 어노테이션이 작동해서
		스프링의 빈으로 등록함.
		패키지탐색기에서 DAOImpl.java 파일 아이콘 우측상단에 s글자가 보이면 등록된 것임. 
	 -->
	<context:component-scan base-package="org.joy.dao"></context:component-scan>
	<context:component-scan base-package="org.joy.service"></context:component-scan>
	<!-- 
		...473p.
	 -->
	<context:component-scan base-package="org.joy.aop"></context:component-scan>		
			



	<!-- 
		...460p.AOP설정을 통한 자동적인 Proxy객체 생성을 위한 설정.
		   자동으로 AspectJ라이브러리를 이용한 Proxy객체를 생성함.
	 -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>	

	<!-- 
		...473p.XML방식으로 AOP기능을 사용할 때 필요한 AOP기능을 설정.
		   이 프로젝트는 어노테이션을 이용해서 설정함.
	 -->
	<aop:config></aop:config>	
	
	
	<!--
		...484p.
		...스프링에서 트랜잭션을 처리하는 방식은 
		   1. XML을 사용해서 별도의 transaction-context.xml을 이용하는 방식. 
		   2. DAO 또는 Mapper등을 이용하는 xxxService클래스에 어노테이션으로 처리하는 방식이 있음.
		   
		...489p.
		...스프링 프로젝트를 이용해서 생성된 경우 가장 간단한 설정은 DataSource설정이
		   존재하는 곳에 적용하는 것이 가장 편리함.
		   하나의 DataSource를 사용하는 경우, 스프링에서 제공하는 DataSourceTransactionManager를
		   이용하고, 이때 필요한 DataSource를 주입받음.		
	 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>	 
	<!-- 
		...489p. 
		   @Transactional을 이용한 트랜잭션 관리가 가능함.
		   일반적인 @Transactional 설정방법 :
				클래스 또는 인터페이스에는 공통적인 규칙을 선언함.
				메서드에는 특별한 설정을 추가함.
	    ...500p.
	       @Transactional 의 우선순위 : 메서드 > 클래스 > 인터페이스.	     
	 -->
	<tx:annotation-driven />
				
</beans>
