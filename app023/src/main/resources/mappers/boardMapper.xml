<?xml version="1.0" encoding="UTF-8"?>

<!-- ...131p.http://www.mybatis.org/mybatis-3/getting-started.html 아래쪽 Exploring 
	Mapped SQL Statements 참조. XML Mapper를 작성할 때는 클래스의 패키지와 유사한 용도로, MyBatis내에서 
	원하는 SQL문을 찾을 수 있는 namespace 설정에 가장 신경을 많이 써야 함. XML Mapper는 root-context.xml에서 
	스프링이 인식하도록 등록함. /src/main/webapp/WEB-INF/spring/root-context.xml -->
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 패키지익스플로러와 상관없이 개발자가 여기서 지정한 경로명이 프로젝트에서 통용됨. -->
<mapper namespace="org.joy.mapper.BoardMapper">

	<insert id="insert">
		insert into ztbl_board (title, content, writer)
		values(#{title},#{content}, #{writer})
	</insert>

	<insert id="insertMember">
		insert into ZTBL_MEMBER (USER_ID, USER_PW, USER_NAME, EMAIL, REG_DATE)
		values (#{user_id}, #{user_pw}, #{user_name}, #{email}, now())
	</insert>

	<!-- ...143p. MyBatis는 기본적으로 PreparedStatement를 이용해서 처리됨. 개발자가 PreparedStatement에 
		들어가는 파라미터를 사용할 때는 '#{}'기호를 이용해서 처리함. '#{}'의 규칙. 1. 파라미터가 여러 속성을 가진 객체인 경우 
		'#{num}'은 getNum() or setNum()을 의미함. 2. 파라미터가 하나이고, 기본자료형이나 문자열인 경우 값이 그대로 
		전달됨. 3. 파라미터가 Map타입인 경우 '#{num}'은 Map객체의 키값이 'num'인 값을 찾는다. -->

	<!-- 183p.mybatis-config.xml::typeAlias태그를 사용하면 boardMapper.xml에서 매번 parameterType, 
		resultType을 패키지까지 포함된 클래스명을 작성하는 번거로움을 덜어줌. -->
	<!-- mybatis-config.xml::typeAlias 적용전 <select id="select" resultType="org.joy.domain.BoardVO"> -->
	<!-- mybatis-config.xml::typeAlias 적용후 -->
	<select id="select" resultType="BoardVO">
		select
		bno, title, content, writer, regdate, view_cnt, reply_cnt
		from
		ztbl_board
		where bno = #{bno}
	</select>

	<update id="update">
		update ztbl_board set title =#{title}, content =#{content}
		where bno = #{bno}
	</update>

	<delete id="delete">
		delete from ztbl_board where bno = #{bno}
	</delete>

	<!-- ...208p. CDATA : XML 부등호 처리. http://cafe.naver.com/gugucoding/1457 -->
	<select id="listAll" resultType="org.joy.domain.BoardVO">
		 <![CDATA[
		 select 
		   bno, title, content, writer, regdate, view_cnt 
		 from 
		   ztbl_board 
		 where bno > 0 
		 order by bno desc, regdate desc
		 ]]>
	</select>

	<!-- ...250p.1페이지를 원할 경우 : limit 0, 10. 2페이지를 원할 경우 : limit 10, 10. 3페이지를 
		원할 경우 : limit 20, 10. -->
	<select id="listPage" resultType="BoardVO">
	<![CDATA[
	select 
	  bno, title, content, writer, regdate, view_cnt 
	from 
	  ztbl_board 
	where bno > 0 
	order by bno desc, regdate desc
	limit #{page}, 10
	]]>
	</select>


	<select id="listCriteria" resultType="BoardVO">
	 <![CDATA[
	 select 
	   bno, title, content, writer, regdate, view_cnt, reply_cnt 
	 from 
	   ztbl_board 
	 where bno > 0 
	 order by bno desc, regdate desc
	 limit #{pageStart}, #{perPageNum}
	 ]]>
	</select>

	<select id="countBno" resultType="int">
	 <![CDATA[
	 select 
	   count(bno) 
	 from 
	   ztbl_board 
	 where 
	   bno > 0 
	 ]]>
	</select>

	<!-- 
		...324p.동적SQL 구현 전에 먼저 확실히 동작하는 SQL문을 실행후 동적SQL 추가할 것. 
		...OGNL : http://commons.apache.org/proper/commons-ognl/language-guide.html
	-->
	<select id="listSearch" resultType="BoardVO">
		<![CDATA[  
		  select * 
		  from ztbl_board 
		  where bno > 0
		]]>   
	<!--  
		...327p.동적SQL 추가.BoardDAOTest.testDynamic1()실행해서 테스트할 것. 
		...INFO : jdbc.sqltiming - select * from ztbl_board where bno > 0 and title like CONCAT('%', '글', '%') order by bno desc 
	-->
		 <if test="searchType != null" > 
		   <if test="searchType == 't'.toString()">
		     and title like CONCAT('%', #{keyword}, '%')
		   </if>
		   <if test="searchType == 'c'.toString()">
		     and content like CONCAT('%', #{keyword}, '%')
		   </if>
		   <if test="searchType == 'w'.toString()">
		     and writer like CONCAT('%', #{keyword}, '%')
		   </if>     
		   <if test="searchType == 'tc'.toString()">
		     and ( title like CONCAT('%', #{keyword}, '%') OR content like CONCAT('%', #{keyword}, '%'))
		   </if>        
		   <if test="searchType == 'cw'.toString()">
		     and ( content like CONCAT('%', #{keyword}, '%') OR writer like CONCAT('%', #{keyword}, '%'))
		   </if>        
		   <if test="searchType == 'tcw'.toString()">
		     and (   title like CONCAT('%', #{keyword}, '%') 
		           OR 
		             content like CONCAT('%', #{keyword}, '%') 
		           OR 
		             writer like CONCAT('%', #{keyword}, '%'))
		   </if>              
		 </if>  
		  
		<![CDATA[
		  order by bno desc
		  limit #{pageStart}, #{perPageNum}
		]]>  
	</select>  
	  
	<select id="listSearchCount" resultType="int">
		<![CDATA[  
		  select count(bno) 
		  from ztbl_board 
		  where bno > 0 
		]]>
	</select>

	<!-- 
		...329p. sql태그를 이용 동일한 SQL문을 재사용할 수 있게 하고, 
		...include태그로 사용함.
	 -->
	<sql id="sqlWhere">
	 <if test="searchType != null" > 
	   <if test="searchType == 't'.toString()">
	     and title like CONCAT('%', #{keyword}, '%')
	   </if>
	   <if test="searchType == 'c'.toString()">
	     and content like CONCAT('%', #{keyword}, '%')
	   </if>
	   <if test="searchType == 'w'.toString()">
	     and writer like CONCAT('%', #{keyword}, '%')
	   </if>     
	   <if test="searchType == 'tc'.toString()">
	     and ( title like CONCAT('%', #{keyword}, '%') 
	     OR content like CONCAT('%', #{keyword}, '%'))
	   </if>        
	   <if test="searchType == 'cw'.toString()">
	     and ( content like CONCAT('%', #{keyword}, '%') 
	     OR writer like CONCAT('%', #{keyword}, '%'))
	   </if>        
	   <if test="searchType == 'tcw'.toString()">
	     and (   title like CONCAT('%', #{keyword}, '%') 
	           OR 
	             content like CONCAT('%', #{keyword}, '%') 
	           OR 
	             writer like CONCAT('%', #{keyword}, '%'))
	   </if>              
	 </if>  
	</sql>
	 
	 <!-- ...330p. include태그로 sql태그를 재사용함. -->
	<select id="listSearch2" resultType="BoardVO">
		<![CDATA[  
		  select * 
		  from ztbl_board 
		  where bno > 0 
		]]>  
	
		<include refid="sqlWhere"></include>
	  
		<![CDATA[    
		  order by bno desc
		  limit #{pageStart}, #{perPageNum}
		]]>  
	</select>
	  
	<select id="listSearchCount2" resultType="int">
		<![CDATA[  
		  select count(bno) 
		  from ztbl_board 
		  where bno > 0 
		]]>
		
	  	<include refid="sqlWhere"></include>
	 
	</select>  
	  	 

	<!-- ...504p. -->
	<update id="updateReplyCnt">
	  update ztbl_board 
	  	 set reply_cnt = reply_cnt + #{amount} 
	  	 where bno = #{bno}
	</update>

	<!-- ...511p. -->
	<update id="updateViewCnt">
	  update ztbl_board 
	  	 set view_cnt = view_cnt +1 
	  	 where bno = #{bno}
	</update>

	<!-- 
	 * ...584p.
		show create table ztbl_attach;
		create table ztbl_attach (
		  fullName varchar(150) not null,
		  bno int not null,
		  regdate timestamp default now(),
		  primary key(fullName)
		);
		
		alter table ztbl_attach add constraint fk_board_attach_bno
		foreign key (bno) references ztbl_board (bno);
	 
	 * ...587p.
	 * ZTBL_BOARD테이블의 설계는 게시물의 번호인 BNO컬럼이 'auto_increment'로
	 * 설계되어서 게시물 등록시점에 게시물 번호가 생성됨.
	 * Oracle DB의 경우, 시퀀스(sequence)를 이용하므로 시퀀스명.currval을 이용함.
	 * MySql DB의 'auto_increment'경우는 데이터가 등록될 때 컬럼값이 생성되므로
	 * MySql의 경우 바로 이전에 등록한 번호는 LAST_INSERT_ID()를 이용함.
	 * 	
	   SELECT A.*, B.fullName FROM ZTBL_BOARD A JOIN ztbl_attach B ON A.BNO = B.BNO;
	 
	 -->
	<insert id="insertAttach">
		insert into ztbl_attach(fullName, bno) 
						values (#{fullName}, LAST_INSERT_ID())
	</insert> 

	<!-- 
		...599p.특정게시물의 첨부파일을 시간 순서대로 가져옴.
	 -->
	<select id="listAttach" resultType="string">
	select fullName from ztbl_attach where bno = #{bno} order by regdate
	</select>

	<!-- ...606p.수정화면에서는 기존 첨부파일을 모두 삭제하고 다시 업로드함. -->
	<delete id="deleteAllAttach">
	delete from ztbl_attach where bno = #{bno}
	</delete>
	
	<insert id="replaceAttach">
	insert into ztbl_attach(fullName, bno) values (#{fullName}, #{bno})
	</insert>


</mapper>